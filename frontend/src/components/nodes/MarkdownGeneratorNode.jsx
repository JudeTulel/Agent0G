import React, { useState, useCallback } from 'react';
import { Handle, Position } from 'reactflow';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { FileDown, File, Calendar, Download, Eye } from 'lucide-react';

const MarkdownGeneratorNode = ({ data, id, selected }) => {
  const [fileName, setFileName] = useState(data.fileName || 'research-report');
  const [includeTimestamp, setIncludeTimestamp] = useState(data.includeTimestamp !== false);
  const [includeToC, setIncludeToC] = useState(data.includeToC !== false);
  const [includeMetadata, setIncludeMetadata] = useState(data.includeMetadata !== false);
  const [templateStyle, setTemplateStyle] = useState(data.templateStyle || 'professional');
  const [headerTemplate, setHeaderTemplate] = useState(data.headerTemplate || `# Research Report

**Generated on:** {{date}}  
**Query:** {{query}}  
**Sources:** {{sourceCount}} websites analyzed  

---

`);
  const [footerTemplate, setFooterTemplate] = useState(data.footerTemplate || `

---

*Report generated by Agent0G Web Research Tool*  
*Generated on: {{timestamp}}*`);

  const handleFileNameChange = useCallback((e) => {
    const newFileName = e.target.value;
    setFileName(newFileName);
    data.onChange?.(id, { ...data, fileName: newFileName });
  }, [data, id]);

  const handleIncludeTimestampChange = useCallback((checked) => {
    setIncludeTimestamp(checked);
    data.onChange?.(id, { ...data, includeTimestamp: checked });
  }, [data, id]);

  const handleIncludeToCChange = useCallback((checked) => {
    setIncludeToC(checked);
    data.onChange?.(id, { ...data, includeToC: checked });
  }, [data, id]);

  const handleIncludeMetadataChange = useCallback((checked) => {
    setIncludeMetadata(checked);
    data.onChange?.(id, { ...data, includeMetadata: checked });
  }, [data, id]);

  const handleTemplateStyleChange = useCallback((value) => {
    setTemplateStyle(value);
    
    // Auto-update templates based on style
    let newHeader = headerTemplate;
    let newFooter = footerTemplate;
    
    switch (value) {
      case 'professional':
        newHeader = `# Research Report

**Generated on:** {{date}}  
**Query:** {{query}}  
**Sources:** {{sourceCount}} websites analyzed  

---

`;
        newFooter = `

---

*Report generated by Agent0G Web Research Tool*  
*Generated on: {{timestamp}}*`;
        break;
      case 'academic':
        newHeader = `# {{query}}: Research Analysis

**Abstract:** This report presents a comprehensive analysis of {{query}} based on {{sourceCount}} web sources.

**Date:** {{date}}  
**Methodology:** Automated web scraping and AI-powered content analysis  

## Executive Summary

`;
        newFooter = `

## References

{{sources}}

---

**Disclaimer:** This report was generated using automated web scraping and AI analysis. Please verify important information from original sources.

*Generated by Agent0G Research Platform on {{timestamp}}*`;
        break;
      case 'blog':
        newHeader = `# {{query}}: What I Found Out

Hey there! I did some research on **{{query}}** and here's what I discovered from {{sourceCount}} different sources around the web.

*Published on {{date}}*

`;
        newFooter = `

---

That's a wrap! Hope this research was helpful. 

*Automatically generated by Agent0G on {{timestamp}}*`;
        break;
      case 'minimal':
        newHeader = `# {{query}}

{{date}}

`;
        newFooter = `

---
*{{timestamp}}*`;
        break;
      default:
        break;
    }
    
    setHeaderTemplate(newHeader);
    setFooterTemplate(newFooter);
    data.onChange?.(id, { 
      ...data, 
      templateStyle: value,
      headerTemplate: newHeader,
      footerTemplate: newFooter
    });
  }, [data, id, headerTemplate, footerTemplate]);

  const handleHeaderTemplateChange = useCallback((e) => {
    const newHeader = e.target.value;
    setHeaderTemplate(newHeader);
    data.onChange?.(id, { ...data, headerTemplate: newHeader });
  }, [data, id]);

  const handleFooterTemplateChange = useCallback((e) => {
    const newFooter = e.target.value;
    setFooterTemplate(newFooter);
    data.onChange?.(id, { ...data, footerTemplate: newFooter });
  }, [data, id]);

  const handlePreview = useCallback(() => {
    // This would show a preview of the generated markdown
    console.log('Preview markdown output');
  }, []);

  const handleDownload = useCallback(() => {
    // This would trigger the download of the generated markdown
    console.log('Download markdown file');
  }, []);

  return (
    <Card className={`min-w-[350px] ${selected ? 'ring-2 ring-blue-500' : ''}`}>
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center gap-2 text-sm">
          <FileDown className="h-4 w-4 text-purple-600" />
          Markdown Generator
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <Label htmlFor="file-name" className="text-xs">File Name</Label>
          <Input
            id="file-name"
            placeholder="research-report"
            value={fileName}
            onChange={handleFileNameChange}
            className="mt-1"
          />
          <div className="text-xs text-muted-foreground mt-1">
            .md extension will be added automatically
          </div>
        </div>

        <div>
          <Label className="text-xs">Template Style</Label>
          <Select value={templateStyle} onValueChange={handleTemplateStyleChange}>
            <SelectTrigger className="mt-1">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="professional">Professional Report</SelectItem>
              <SelectItem value="academic">Academic Paper</SelectItem>
              <SelectItem value="blog">Blog Post</SelectItem>
              <SelectItem value="minimal">Minimal</SelectItem>
              <SelectItem value="custom">Custom Template</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="space-y-3">
          <Label className="text-xs font-medium">Output Options</Label>
          
          <div className="flex items-center space-x-2">
            <Checkbox
              id="include-timestamp"
              checked={includeTimestamp}
              onCheckedChange={handleIncludeTimestampChange}
            />
            <Label htmlFor="include-timestamp" className="text-xs flex items-center gap-1">
              <Calendar className="h-3 w-3" />
              Include Timestamp
            </Label>
          </div>

          <div className="flex items-center space-x-2">
            <Checkbox
              id="include-toc"
              checked={includeToC}
              onCheckedChange={handleIncludeToCChange}
            />
            <Label htmlFor="include-toc" className="text-xs">
              Generate Table of Contents
            </Label>
          </div>

          <div className="flex items-center space-x-2">
            <Checkbox
              id="include-metadata"
              checked={includeMetadata}
              onCheckedChange={handleIncludeMetadataChange}
            />
            <Label htmlFor="include-metadata" className="text-xs">
              Include Source Metadata
            </Label>
          </div>
        </div>

        <div>
          <Label htmlFor="header-template" className="text-xs">Header Template</Label>
          <Textarea
            id="header-template"
            placeholder="Markdown header template..."
            value={headerTemplate}
            onChange={handleHeaderTemplateChange}
            className="mt-1 text-xs font-mono"
            rows={4}
          />
        </div>

        <div>
          <Label htmlFor="footer-template" className="text-xs">Footer Template</Label>
          <Textarea
            id="footer-template"
            placeholder="Markdown footer template..."
            value={footerTemplate}
            onChange={handleFooterTemplateChange}
            className="mt-1 text-xs font-mono"
            rows={3}
          />
        </div>

        <div className="flex gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={handlePreview}
            className="flex-1 text-xs"
          >
            <Eye className="h-3 w-3 mr-1" />
            Preview
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={handleDownload}
            className="flex-1 text-xs"
          >
            <Download className="h-3 w-3 mr-1" />
            Download
          </Button>
        </div>

        <div className="text-xs text-muted-foreground mt-3 p-2 bg-muted rounded">
          <File className="h-3 w-3 inline mr-1" />
          Generates downloadable markdown reports from research data
        </div>
      </CardContent>

      {/* Input handle */}
      <Handle
        type="target"
        position={Position.Left}
        style={{ background: '#8b5cf6' }}
      />
      
      {/* Output handle */}
      <Handle
        type="source"
        position={Position.Right}
        style={{ background: '#8b5cf6' }}
      />
    </Card>
  );
};

export default MarkdownGeneratorNode;
